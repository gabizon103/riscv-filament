import "primitives/core.fil";
import "primitives/sequential.fil";
import "components.fil";

/* 
  alu supporting some riscv ops:

  add, sub,
  slt, sltu,
  and, or, xor,
  sll, srl, sra,
  cmp, cmpu
*/

comp alu<G:3> (
  @interface[G] go:1,
  @[G,G+3] op:4,
  @[G,G+1] left:32,
  @[G,G+1] right:32,
) -> (@[G+2,G+3] out:32) {
  add0 := new Add[32]<G>(left,right);
  and0 := new And[32]<G>(left,right);
  or0 := new Or[32]<G>(left,right);
  xor0 := new Xor[32]<G>(left,right);

  reg0 := new Reg[32]<G,G+3>(add0.out);
  reg1 := new Reg[32]<G,G+3>(and0.out);
  reg2 := new Reg[32]<G,G+3>(or0.out);
  reg3 := new Reg[32]<G,G+3>(xor0.out);
}
